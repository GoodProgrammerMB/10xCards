name: Pull Request Workflow

on:
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened]

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.2.2

      - name: Setup .NET
        uses: actions/setup-dotnet@v4.3.1
        with:
          dotnet-version: '8.0.x'

      - name: Restore dependencies
        run: dotnet restore

      - name: Check code format
        run: dotnet format --verify-no-changes

  unit-tests:
    name: Run Unit Tests
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.2.2

      - name: Setup .NET
        uses: actions/setup-dotnet@v4.3.1
        with:
          dotnet-version: '8.0.x'

      - name: Restore dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --configuration Release --no-restore

      - name: Run tests with coverage
        run: dotnet test --no-restore --verbosity normal --collect:"XPlat Code Coverage" FlashCard.Tests/FlashCard.Tests.csproj

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5.4.2
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: true
          verbose: true
          flags: unittests
          name: codecov-umbrella

  status-comment:
    name: Add Status Comment
    runs-on: ubuntu-latest
    needs: [lint, unit-tests]
    if: always()
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.2.2

      - name: Create or update status comment
        uses: actions/github-script@v7.0.1
        with:
          script: |
            const lintStatus = '${{ needs.lint.result }}' === 'success' ? '✅' : '❌';
            const testStatus = '${{ needs.unit-tests.result }}' === 'success' ? '✅' : '❌';
            
            const body = `## Pull Request Status
            
            | Check | Status |
            | ----- | ------ |
            | Lint | ${lintStatus} |
            | Unit Tests | ${testStatus} |
            
            [View workflow details](${context.payload.repository.html_url}/actions/runs/${context.runId})
            `;
            
            // Get existing comments for this PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number
            });
            
            // Find our status comment if it exists
            const statusComment = comments.find(comment => comment.body.includes('Pull Request Status'));
            
            if (statusComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: statusComment.id,
                body
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body
              });
            } 