name: Deploy to Cloudflare Pages

on:
  push:
    branches: [master]
  workflow_dispatch:

env:
  DOTNET_VERSION: '8.0.x'

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore dependencies
        run: dotnet restore

      - name: Auto-format code
        run: dotnet format

      - name: Check code format
        run: dotnet format --verify-no-changes --exclude FlashCard.E2ETests/

  unit-tests:
    name: Run Unit Tests
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --configuration Release --no-restore

      - name: Run tests with coverage
        run: dotnet test --no-restore --verbosity normal --collect:"XPlat Code Coverage" FlashCard.Tests/FlashCard.Tests.csproj

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        env: 
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: false
          verbose: true
          flags: unittests
          name: codecov-umbrella
          directory: ./FlashCard.Tests/TestResults/

  build-and-deploy:
    name: Build and Deploy
    needs: [lint, unit-tests]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      deployments: write
    env:
      OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore dependencies
        run: dotnet restore

      - name: Build Blazor app
        run: dotnet publish FlashCard.App/FlashCard.App.csproj -c Release -o dist

      # Zakomentowany blok deploymentu na Cloudflare Pages
      # - name: Deploy to Cloudflare Pages
      #   uses: cloudflare/pages-action@v1
      #   with:
      #     apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
      #     accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
      #     projectName: flashcards-app
      #     directory: dist/wwwroot
      #     gitHubToken: ${{ secrets.GITHUB_TOKEN }}
      #     branch: main
      #     wranglerVersion: '3'

  notify-deployment:
    name: Notify Deployment Status
    needs: build-and-deploy
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Create deployment status
        uses: actions/github-script@v7
        with:
          script: |
            const deployStatus = '${{ needs.build-and-deploy.result }}' === 'success' ? '✅ Sukces' : '❌ Błąd';
            const body = `## Status wdrożenia
            
            | Etap | Status |
            | ----- | ------ |
            | Lint | ${{ needs.lint.result == 'success' && '✅' || '❌' }} |
            | Unit Tests | ${{ needs.unit-tests.result == 'success' && '✅' || '❌' }} |
            | Deployment | ${deployStatus} |
            
            [Zobacz szczegóły](${context.payload.repository.html_url}/actions/runs/${context.runId})`;
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number || 0,
              body
            }); 