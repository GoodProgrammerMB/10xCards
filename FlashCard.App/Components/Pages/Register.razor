@page "/register"
@using FlashCard.App.Models
@using FlashCard.App.Services
@using System.ComponentModel.DataAnnotations
@inject IAuthService AuthService
@inject NavigationManager NavigationManager

<MudContainer MaxWidth="MaxWidth.Small" Class="pa-4">
    <MudPaper Class="pa-4">
        <MudText Typo="Typo.h4" Class="mb-4">Rejestracja</MudText>

        <MudForm @ref="form" @bind-IsValid="@isValid">
            <MudTextField T="string"
                         @bind-Value="registerModel.Email"
                         Label="Email"
                         Required="true"
                         RequiredError="Email jest wymagany"
                         Validation="@(new EmailAddressAttribute() {ErrorMessage = "Nieprawidłowy format adresu email"})"
                         Class="mb-4" />

            <MudTextField T="string"
                         @bind-Value="registerModel.Password"
                         Label="Hasło"
                         Required="true"
                         RequiredError="Hasło jest wymagane"
                         InputType="InputType.Password"
                         Validation="@(new Func<string, string>(ValidatePassword))"
                         Class="mb-4" />

            <MudTextField T="string"
                         @bind-Value="registerModel.ConfirmPassword"
                         Label="Potwierdź hasło"
                         Required="true"
                         RequiredError="Potwierdzenie hasła jest wymagane"
                         InputType="InputType.Password"
                         Validation="@(new Func<string, string>(ValidateConfirmPassword))"
                         Class="mb-4" />

            @if (!string.IsNullOrEmpty(error))
            {
                <MudAlert Severity="Severity.Error" Class="mb-4">@error</MudAlert>
            }

            <MudButton Variant="Variant.Filled"
                      Color="Color.Primary"
                      OnClick="HandleRegister"
                      Disabled="@(!isValid || isLoading)"
                      Class="mb-4">
                @if (isLoading)
                {
                    <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true"/>
                    <MudText Class="ms-2">Rejestracja...</MudText>
                }
                else
                {
                    <MudText>Zarejestruj się</MudText>
                }
            </MudButton>

            <MudDivider Class="mb-4" />

            <MudText>Masz już konto? <MudLink Href="/login">Zaloguj się</MudLink></MudText>
        </MudForm>
    </MudPaper>
</MudContainer>

@code {
    private MudForm form;
    private RegisterModel registerModel = new();
    private bool isValid;
    private bool isLoading;
    private string error;

    protected override async Task OnInitializedAsync()
    {
        if (await AuthService.IsAuthenticated())
        {
            NavigationManager.NavigateTo("/");
        }
    }

    private string ValidatePassword(string password)
    {
        if (string.IsNullOrWhiteSpace(password))
            return "Hasło jest wymagane";
        if (password.Length < 6)
            return "Hasło musi mieć co najmniej 6 znaków";
        return null;
    }

    private string ValidateConfirmPassword(string confirmPassword)
    {
        if (string.IsNullOrWhiteSpace(confirmPassword))
            return "Potwierdzenie hasła jest wymagane";
        if (confirmPassword != registerModel.Password)
            return "Hasła nie są identyczne";
        return null;
    }

    private async Task HandleRegister()
    {
        if (!isValid) return;

        isLoading = true;
        error = null;

        try
        {
            var result = await AuthService.RegisterAsync(registerModel);
            if (result.Successful)
            {
                NavigationManager.NavigateTo("/login");
            }
            else
            {
                error = result.Error;
            }
        }
        catch (Exception ex)
        {
            error = "Wystąpił błąd podczas rejestracji. Spróbuj ponownie później.";
        }
        finally
        {
            isLoading = false;
        }
    }
} 