@page "/generowanie-fiszek"
@using FlashCard.App.Models
@using Microsoft.AspNetCore.Authorization
@using Microsoft.JSInterop
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject IGenerationService GenerationService
@inject IJSRuntime JSRuntime
@attribute [Authorize]

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-4">
    <MudPaper Class="pa-4">
        <MudForm @ref="form" Model="@request">
            <MudTextField @bind-Value="request.SourceText"
                         Label="Tekst źródłowy"
                         Lines="10"
                         Required="true"
                         RequiredError="Tekst źródłowy jest wymagany"
                         HelperText="Wprowadź tekst o długości od 1000 do 10000 znaków"
                         Counter="10000"
                         MaxLength="10000" />
            <MudSelect @bind-Value="request.Model" Label="Model" Required="true" RequiredError="Model jest wymagany">
                <MudSelectItem Value="@("gpt-4")">GPT-4</MudSelectItem>
                <MudSelectItem Value="@("gpt-4-turbo")">GPT-4 Turbo</MudSelectItem>
                <MudSelectItem Value="@("gpt-4-vision-preview")">GPT-4 Vision</MudSelectItem>
                <MudSelectItem Value="@("gpt-3.5-turbo")">GPT-3.5 Turbo</MudSelectItem>
                <MudSelectItem Value="@("gpt-3.5-turbo-16k")">GPT-3.5 Turbo 16K</MudSelectItem>
            </MudSelect>
            <MudButton Color="Color.Primary" OnClick="GenerateFlashcards" Class="mt-4" Disabled="@isLoading">
                @if (isLoading)
                {
                    <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                    <MudText Class="ms-2">Generowanie...</MudText>
                }
                else
                {
                    <MudText>Generuj fiszki</MudText>
                }
            </MudButton>
        </MudForm>
    </MudPaper>

    @if (isLoading)
    {
        <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-4" />
    }

    @if (flashcards != null && flashcards.Any())
    {
        <MudPaper Class="pa-4 mt-4">
            <MudText Typo="Typo.h6" Class="mb-4">Wygenerowane fiszki</MudText>
            <MudList Items="@flashcards" T="GeneratedFlashcard">
                @foreach (var flashcard in flashcards)
                {
                    <MudListItem T="GeneratedFlashcard" Value="@flashcard">
                        <MudCard>
                            <MudCardContent>
                                <MudText Typo="Typo.body1"><strong>Pytanie:</strong> @flashcard.Front</MudText>
                                <MudText Typo="Typo.body1"><strong>Odpowiedź:</strong> @flashcard.Back</MudText>
                            </MudCardContent>
                            <MudCardActions>
                                <MudButton OnClick="@(() => EditFlashcard(flashcard))">Edytuj</MudButton>
                                <MudButton OnClick="@(() => DeleteFlashcard(flashcard))">Usuń</MudButton>
                            </MudCardActions>
                        </MudCard>
                    </MudListItem>
                }
            </MudList>
            <MudButton Color="Color.Primary" 
                      OnClick="SaveFlashcards" 
                      Class="mt-4" 
                      Disabled="@(isLoading || !flashcards.Any())">
                @if (isSaving)
                {
                    <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                    <MudText Class="ms-2">Zapisywanie...</MudText>
                }
                else
                {
                    <MudText>Zapisz wszystkie fiszki</MudText>
                }
            </MudButton>
        </MudPaper>
    }
</MudContainer>

@code {
    private MudForm form = null!;
    private GenerationRequest request = new();
    private bool isLoading;
    private bool isSaving;
    private List<GeneratedFlashcard> flashcards = new();
    private int? currentGenerationId;

    protected override void OnInitialized()
    {
        // Ustaw domyślny model
        if (string.IsNullOrEmpty(request.Model))
        {
            request.Model = "gpt-4";
        }
    }

    private async Task GenerateFlashcards()
    {
        await form.Validate();
        if (!form.IsValid) return;

        isLoading = true;
        try
        {
            var response = await GenerationService.GenerateFlashcardsAsync(request);
            flashcards = response.Flashcards;
            currentGenerationId = response.Id;
            Snackbar.Add("Fiszki zostały wygenerowane", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Wystąpił błąd podczas generowania fiszek: {ex.Message}", Severity.Error);
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task EditFlashcard(GeneratedFlashcard flashcard)
    {
        var parameters = new DialogParameters
        {
            ["Flashcard"] = flashcard
        };

        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };
        var dialog = DialogService.Show<FlashcardEditDialog>("Edytuj fiszkę", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            var editedFlashcard = (GeneratedFlashcard)result.Data;
            var index = flashcards.IndexOf(flashcard);
            flashcards[index] = editedFlashcard;
            Snackbar.Add("Fiszka została zaktualizowana", Severity.Success);
            StateHasChanged();
        }
    }

    private void DeleteFlashcard(GeneratedFlashcard flashcard)
    {
        flashcards.Remove(flashcard);
        Snackbar.Add("Fiszka została usunięta", Severity.Success);
        StateHasChanged();
    }

    private async Task SaveFlashcards()
    {
        if (!currentGenerationId.HasValue)
        {
            Snackbar.Add("Brak identyfikatora generacji", Severity.Error);
            return;
        }

        isSaving = true;
        try
        {
            var request = new BatchSaveRequest
            {
                Flashcards = flashcards.Select(f => new GeneratedFlashcard
                {
                    Front = f.Front,
                    Back = f.Back,
                    GenerationId = currentGenerationId
                }).ToList()
            };

            var response = await GenerationService.SaveFlashcardsAsync(request);
            Snackbar.Add($"Zapisano {response.Summary.TotalCreated} fiszek", Severity.Success);
            
            // Wyczyść listę po zapisaniu
            flashcards.Clear();
            currentGenerationId = null;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Wystąpił błąd podczas zapisywania fiszek: {ex.Message}", Severity.Error);
        }
        finally
        {
            isSaving = false;
            StateHasChanged();
        }
    }
} 