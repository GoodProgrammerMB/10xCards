@using FlashCard.App.Models
@using System.Text.Json
@inject ISnackbar Snackbar
<style>
    .mud-dialog-width-lg {
        max-width: 1280px;
        min-width: 600px;
    }
</style>
<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">Edytuj fiszkę</MudText>
    </TitleContent>
    <DialogContent>
        <MudTextField @bind-Value="frontText"
                     Label="Pytanie"
                     Lines="3"
                     Required="true"
                     RequiredError="Pytanie jest wymagane" />
        <MudTextField @bind-Value="backText"
                     Label="Odpowiedź"
                     Lines="3"
                     Required="true"
                     RequiredError="Odpowiedź jest wymagana"
                     Class="mt-3" />
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Anuluj</MudButton>
        <MudButton Color="Color.Primary" OnClick="Submit">Zapisz</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; } = null!;
    [Parameter] public object Flashcard { get; set; } = null!;
    
    private string frontText = string.Empty;
    private string backText = string.Empty;
    private bool isGeneratedFlashcard = false;
    private bool isNormalFlashcard = false;

    protected override void OnInitialized()
    {
        isGeneratedFlashcard = Flashcard is GeneratedFlashcard;
        // Musimy używać GetType zamiast pattern matching, by uniknąć problemu z castowaniem
        isNormalFlashcard = Flashcard.GetType() == typeof(Flashcard);
        
        if (isGeneratedFlashcard)
        {
            var genFlashcard = (GeneratedFlashcard)Flashcard;
            frontText = FlashcardFormatter.FormatFlashcard(genFlashcard.FrontDisplay);
            backText = FlashcardFormatter.FormatExampleTranslation(genFlashcard.BackDisplay);
        }
        else if (isNormalFlashcard)
        {
            var flashcard = (Flashcard)Flashcard;
            frontText = flashcard.Front;
            backText = flashcard.Back;
        }
    }

    private void Submit()
    {
        if (string.IsNullOrWhiteSpace(frontText) || string.IsNullOrWhiteSpace(backText))
        {
            Snackbar.Add("Wszystkie pola są wymagane", Severity.Warning);
            return;
        }
        
        try 
        {
            if (isGeneratedFlashcard)
            {
                var genFlashcard = (GeneratedFlashcard)Flashcard;
                var editedFlashcard = new GeneratedFlashcard
                {
                    GenerationId = genFlashcard.GenerationId
                };
                
                var simpleFront = JsonSerializer.Serialize(new { Word = frontText });
                var simpleBack = JsonSerializer.Serialize(new { Example_Translation = backText });
                
                editedFlashcard.Front = JsonDocument.Parse(simpleFront).RootElement;
                editedFlashcard.Back = JsonDocument.Parse(simpleBack).RootElement;
                
                MudDialog.Close(DialogResult.Ok(editedFlashcard));
            }
            else if (isNormalFlashcard)
            {
                var flashcard = (Flashcard)Flashcard;
                var editedFlashcard = new Flashcard
                {
                    Id = flashcard.Id,
                    Front = frontText,
                    Back = backText,
                    Source = flashcard.Source,
                    Accepted = flashcard.Accepted,
                    TemporaryId = flashcard.TemporaryId
                };
                
                MudDialog.Close(DialogResult.Ok(editedFlashcard));
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Błąd podczas zapisywania fiszki: {ex.Message}", Severity.Error);
        }
    }

    private void Cancel() => MudDialog.Cancel();

    public class FlashcardModel
    {
        public string Word { get; set; } = string.Empty;
        public string Translation { get; set; } = string.Empty;
        public string Definition { get; set; } = string.Empty;
        public string Example { get; set; } = string.Empty;
    }

    public class ExampleTranslationModel
    {
        public string Example_Translation { get; set; } = string.Empty;
    }
} 

